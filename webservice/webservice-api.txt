##################
# WEBSERVICE API #
##################

Please notice: All API calls require an HTTP Authorization header. The header is expected to look like this:

  Authorization: Basic <string>

where <string> is a base64-encoded string in the format <username>:<password>.

Additionally, to distinguish between different account roles, the client must provide a special header like this:

  X-ASEPART-Role: <role>

where <role> can be either Admin or User.

The following REST operations are available:

- Check if your username and password are correct

  HTTP operation: GET
  Path:           /login
  Roles:          Admin, User
  Status code:    [200 OK]           if credentials are valid.
                  [401 Unauthorized] if credentials are not valid.

- List existing projects the admin is able to view

  HTTP operation: GET
  Path:           /projects
  Roles:          Admin
  Returns:        JSON array of projects (see Project class).
  Status code:    [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.

- Create new project or change existing project

  HTTP operation: POST
  Path:           /projects
  Roles:          Admin
  Request-Body:   Project information as JSON object (see Project class).
  Status code:    [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the permissions are not sufficient (e.g. you are not an admin/do not own the project).

- Delete project

  HTTP operation: DELETE
  Path:           /projects/{key}
  Roles:          Admin
  Status code:    [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the permissions are not sufficient.
                  [404 Not found]    if project did not exist before request.

- Create new ticket or change existing ticket (set id=0 to create new ticket)

  HTTP operation: POST
  Path:           /projects/{key}/tickets
  Roles:          Admin
  Request-Body:   Ticket information as JSON object (see Ticket class).
  Status code:    [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the permissions are not sufficient.
                  [404 Not found]    if project does not exist.

- List tickets of project

  HTTP operation: GET
  Path:           /projects/{key}/tickets
  Roles:          Admin, User
  Returns:        JSON array of tickets (see Ticket class).
  Status code:    [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the permissions are not sufficient.
                  [404 Not found]    if project does not exist.

- Get specific ticket

  HTTP operation: GET
  Path:           /projects/{key}/tickets/{id}
  Roles:          Admin, User
  Status code:    [200 OK]           in case of success.
                  [400 Bad Request]  if ticket is not part of project.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the permissions are not sufficient.
                  [404 Not found]    if project or ticket do not exist.

- Delete ticket from project

  HTTP operation: DELETE
  Path:           /projects/{key}/tickets/{id}
  Roles:          Admin
  Status code:    [200 OK]           in case of success.
                  [400 Bad Request]  if ticket is not part of project.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the permissions are not sufficient.
                  [404 Not found]    if project or ticket did not exist before request.

- List users of project

  HTTP operation: GET
  Path:           /projects/{key}/users
  Roles:          Admin
  Returns:        JSON array of users (see User class).
  Status code:    [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the permissions are not sufficient.
                  [404 Not found]    if project does not exist.

- Delete user from project

  HTTP operation: DELETE
  Path:           /projects/{key}/users/{username}
  Roles:          Admin
  Status code:    [200 OK]           in case of success.
                  [400 Bad Request]  if user has not joined.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the permissions are not sufficient.
                  [404 Not found]    if project does not exist or user was not member of project.

- Join project as user

  HTTP operation: POST
  Path:           /join
  Roles:          User
  Request-Body:   Entry key as ASCII string.
  Status code:    [200 OK]           in case of success.
                  [400 Bad Request]  if user has already joined.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized account is not an user account.
                  [404 Not found]    if entry key is invalid.

- Get name of the project the user got an entry key for

  HTTP operation: GET
  Path:           /join?key=<key>
  Roles:          User
  Returns:        Name of project as an ASCII string.
  Status code:    [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized account is not an user account.
                  [404 Not found]    if entry key is invalid.

- Send a message in a ticket group chat

  HTTP operation: POST
  Path:           /messages/{ticket}
  Roles:          Admin, User
  Request Body:   The chat message as ASCII text.
  Status code:    [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized account is not a member of the associated project.
                  [404 Not found]    if ticket does not exist.

- Lists messages of a ticket group chat

  HTTP operation: GET
  Path:           /messages/{ticket}
  Roles:          Admin, User
  Returns:        JSON array of chat messages (see Message class).
  Status code:    [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized account is not a member of the associated project.
                  [404 Not found]    if ticket does not exist.

- Create or edit user

  HTTP operation: POST
  Path:           /users
  Roles:          Admin
  Request-Body:   User information as JSON object (see User class).
  Status code:    [200 OK]           in case of success.
                  [400 Bad Request]  if admin with same name exists.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized account is not an admin account.

- Delete user

  HTTP operation: DELETE
  Path:           /users/{username}
  Roles:          Admin
  Status code:    [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized account is not an admin account.
                  [404 Not found]    if user does not exist.

- List users

  HTTP operation: GET
  Path:           /users
  Roles:          Admin
  Returns:        JSON array of users (see User class).
                  [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized account is not an admin account.

- Create or edit admin

  HTTP operation: POST
  Path:           /admins
  Roles:          Admin
  Request-Body:   Admin information as JSON object (see Admin class).
  Status code:    [200 OK]           in case of success.
                  [400 Bad Request]  if user with same name exists.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized account is not an admin account.

- List admins

  HTTP operation: GET
  Path:           /admins
  Roles:          Admin
  Returns:        JSON array of admins (see Admin class).
                  [200 OK]           in case of success.
                  [401 Unauthorized] if the provided username or password is invalid.
                  [403 Forbidden]    if the authorized account is not an admin account.
